# 【全局配置】
global:
  scrape_interval:     1m # By default, scrape targets every 15 seconds.
  scrape_timeout:      10s
  evaluation_interval: 1m # Evaluate rules every 15 seconds.
  # 添加额外的label标签
  # 场景：用于多个promehtues实例时标记分组
  external_labels:
    cluster: prometheus-ha
    prometheus_replica: prometheus-0
  # 查询PromQL记录到日志
  query_log_file: "/tmp/promeQL.log"


# 【规则配置】 
rule_files:
  - "host_rules.yml"
  - "rules/*_rules.yml"


# 【数据源配置】
scrape_configs:

  - job_name: 'prometheus'
    scrape_interval: 1m
    scrape_timeout: 30s
    metrics_path: /metrics
    # honor_labels 当label标签冲突的时候如何处理，默认false
    # true 保持抓取的label值，忽略服务端配置的label。如job，instance
    # false 重命名抓取的label为exporter_label，服务端配置的label保持。如exporter_job，job
    # 场景： 联邦模式、pushgateway使设置为true保证抓取的label存在。
    honor_labels: true
    # honor_timestamps 服务prometheus是否代表抓取数据时间戳，默认true
    # ture  数据源上报的时间戳将被使用
    # false 忽略数据源上报的时间戳
    honor_timestamps: true
    scheme: http
    
    # 采样限制,设置sample数量
    sample_limit: 0
    
    # （安全验证）
    basic_auth:
      username: root
      password: root
      # password_file: passwd.txt
    
    # 每次请求通过设置http的请求头部Authorization进行验证
    bearer_token: mysecret
    # 每次请求读取文件密码来设置头部Authorization进行验证
    # bearer_token_file: secret.txt
    
    # TLS 设置
    tls_config:
      cert_file: valid_cert_file
      key_file: valid_key_file
    
    # (静态配置 数据源)
    static_configs:
    - targets: ['localhost:9090']
      labels:
        group: 'localhost'

    # （动态配置 文件发现数据源）
    file_sd_configs:
    - files:
      - foo/*.slow.json
      - foo/*.slow.yml
      refresh_interval: 5m
    - files:
      - bar/*.yaml
          
  - job_name: 'consul_service_discovery'
    # （动态配置 consul服务发现数据源）
    consul_sd_configs:
    - server: 'localhost:8500'
      token: mysecret
      datacenter: dc1
      scheme: https
      username: root
      password: root
      
      tls_config:
        ca_file: valid_ca_file
        cert_file: valid_cert_file
        key_file:  valid_key_file     
        insecure_skip_verify: false
        
      # 默认抓取所有node所有service
      services: ['node_exporter', 'nginx', 'mysql']
      # 服务service必须包含tag
      tags: ["prometheus", "exporter"]
      # 过滤node，默认所有node
      node_meta:
        rack: "123"
      # consul的tag label的连接符 默认逗号,
      tag_separator: ,
      # 默认缓存consul的结果，减少加载consul
      # https://www.consul.io/api/features/consistency.htm
      allow_stale: true
      # 提供names后刷新时间
      # 场景：大量数据时考虑增加时间，因为catalog会经常改变
      refresh_interval: 30s
      
      # 将tag设置为新的label （采集数据前处理，数据还没采集）
      relabel_configs:
  		- source_labels: [__meta_sd_consul_tags]
    		separator:     ','
   			regex:         label:([^=]+)=([^,]+)
    		target_label:  ${1}
    		replacement:   ${2}
      
      # 对采集数据metric进行设置 （采集数据后处理，数据已采集）
      metric_relabel_configs
      - source_labels: [job]
        regex:         (.*)some-[regex]
        action:        drop
    
  # （pushgateway模式 数据源）
  - job_name: pushgateway
    static_configs:
    - targets: ['pushgateway:9091']
      labels:
        instance: pushgateway          

  # (联邦模式 数据源)
  - job_name: 'federate'
    scrape_interval: 15s
    honor_labels: true
    honor_timestamps: false
    metrics_path: '/federate'
    static_configs:
      - targets:
        - 'prometheus-park:9090'  
          
    
# 【告警配置】
alerting:
  # 对label做修改
  alert_relabel_configs:
  - source_labels: [job]
    regex:         (.*)some-[regex]
    action:        drop
  alertmanagers:
  # push告警的超时时间
  - timeout: 10s
    scheme: https
    #（静态配置 ，也可以配置动态发现alertmanager）
    static_configs:
    - targets:
      - "1.2.3.4:9093"
      - "1.2.3.5:9093"


# 【远程读】
remote_write:
  - url: http://remote1/push
    remote_timeout: 30s
    name: drop_expensive
    write_relabel_configs:
    - source_labels: [__name__]
      regex:         expensive.*
      action:        drop

# 【远程写】
remote_read:
  - url: http://remote1/read
    read_recent: true
    name: default
  - url: http://remote3/read
    read_recent: false
    name: read_special
    required_matchers:
      job: special
    tls_config:
      cert_file: valid_cert_file
      key_file: valid_key_file